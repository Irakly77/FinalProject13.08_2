//
//  NewContact.swift
//  RXApp
//
//  Created by –êlina –öovtunovich on 12.08.2024.
//

import SwiftUI
import RealmSwift
import APICats

struct NewContact: View {
    @Environment(\.presentationMode) var presentationMode: Binding<PresentationMode>
    
    @State private var name: String = ""
    @State private var surname: String = ""
    @State private var flag: String = ""
    @State private var number: String = ""
    @State private var twitter: String = ""
    @State private var instagram: String = ""
    @State private var linkedin: String = ""
    @State private var facebook: String = ""
    
    @State private var avatarURL: URL? // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç–∞.
    
    var body: some View {
        VStack {
            
            if let avatarURL = avatarURL {
                // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç–∞
                AsyncImage(url: avatarURL) { image in
                    image
                        .resizable()
                        .scaledToFit()
                        .frame(width: 56, height: 56)
                        .cornerRadius(16)
                } placeholder: {
                    Image("Avatar1")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 100, height: 101)
                }
            } else {
                // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                Button(action: {
                    fetchCatImage() // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∞–≤–∞—Ç–∞—Ä
                }) {
                    Image("Avatar1")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 100, height: 101)
                }
            }
            
            Group {
                createTextField(placeholder: "–ò–º—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", text: $name)
                createTextField(placeholder: "–§–∞–º–∏–ª–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", text: $surname)
                createEmailField()
                createTextField(placeholder: "twitter", text: $twitter)
                createTextField(placeholder: "@instagram", text: $instagram)
                createTextField(placeholder: "linkedin", text: $linkedin)
                createTextField(placeholder: "facebook/profile", text: $facebook)
            }
            .padding(.bottom, 32)
            
            Button(action: {
                saveContact()
                presentationMode.wrappedValue.dismiss()
            }) {
                Text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
                    .frame(width: 200, height: 40)
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(8)
            }
        }
        .navigationBarBackButtonHidden(true)
        .toolbar {
            ToolbarItem(placement: .navigationBarLeading) {
                Button(action: {
                    self.presentationMode.wrappedValue.dismiss()
                }) {
                    HStack {
                        Image(systemName: "arrow.left")
                        Text("–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç")
                    }
                }
                .foregroundColor(.black)
            }
        }
    }
    
    private func createTextField(placeholder: String, text: Binding<String>) -> some View {
        ZStack {
            RoundedRectangle(cornerRadius: 4)
                .fill(Color(red: 247/255, green: 247/255, blue: 252/255))
                .frame(width: 327, height: 36)
            HStack {
                TextField(placeholder, text: text)
                    .foregroundColor(.black)
                    .padding(.horizontal, 40)
                Spacer()
            }
        }
    }
    
    private func createEmailField() -> some View {
        HStack {
            TextField("üá∑üá∫+7", text: $flag)
                .foregroundColor(.black)
                .padding(.horizontal, 3)
                .frame(width: 57, height: 36)
                .background(RoundedRectangle(cornerRadius: 4).fill(Color(red: 247/255, green: 247/255, blue: 252/255)))
            TextField("000 000-00-00", text: $number)
                .foregroundColor(.black)
                .padding(.horizontal, 8)
                .frame(width: 262, height: 36)
                .background(RoundedRectangle(cornerRadius: 4).fill(Color(red: 247/255, green: 247/255, blue: 252/255)))
        }
        .frame(width: 327, height: 36)
    }
    
    private func saveContact() {
        let realm = try! Realm()
        let contact = Contact()
        contact.name = name
        contact.surname = surname
        contact.avatarPath = avatarURL?.absoluteString ?? "Avatar1"
//        contact.flag = flag
        contact.number = number
        contact.twitter = twitter
        contact.instagram = instagram
        contact.linkedin = linkedin
        contact.facebook = facebook
        
        try! realm.write {
            realm.add(contact)
        }
    }
    
    private func fetchCatImage(retries: Int = 3) {
        loadingCats { data, error in
            if let url = data {
                avatarURL = url
            } else if retries > 0 {
                // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –±–æ–ª—å—à–µ –Ω—É–ª—è, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                fetchCatImage(retries: retries - 1)
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
                print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç–∞: \(String(describing: error))")
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
            }
        }
    }
    
    func loadingCats(completion: @escaping (_ data: URL?, _ error: Error?) -> Void) {
        CatsAPI.catGet(id: "cat") { data, error in
            completion(data, error)
        }
    }
}

struct NewContact_Previews: PreviewProvider {
    static var previews: some View {
        NewContact()
    }
}
